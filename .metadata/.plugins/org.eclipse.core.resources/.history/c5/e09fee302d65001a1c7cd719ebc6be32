package competicion;

import java.util.Collection;

import javax.swing.RowFilter.ComparisonType;

import personal.Entrenador;
import personal.Jugador;

public class Equipo implements Equipable, Clasificable{
	
	private Competicionable competicion;
	private int identificador;
	private Collection<Jugador> jugadores;
	private Collection<Entrenador> entrenadores;

	@Override
	public String getTemporada() {

		return competicion.getTemporada();
	}

	@Override
	public Licencia getLicencia() {

		return competicion.getLicencia();
	}

	@Override
	public int getGrupo() {

		return competicion.getGrupo();
	}

	@Override
	public Categoria getCategoria() {

		return competicion.getCategoria();
	}

	@Override
	public TipoEquipo getTipoEquipo() {

		return competicion.getTipoEquipo();
	}

	@Override
	public int getGanados() {

		return competicion.getCompeticion().getClasificacion().getPartidosGanados().get(this);
	}

	@Override
	public int getEmpatados() {

		return 0;
	}

	@Override
	public int getPerdidos() {

		return 0;
	}

	@Override
	public int getPuntos() {

		return 0;
	}

	@Override
	public int getGolesFavor() {

		return 0;
	}

	@Override
	public int getGolesContra() {

		return 0;
	}

	@Override
	public int getPosicion() {

		return 0;
	}

	@Override
	public int getIdentificador() {

		return 0;
	}

	@Override
	public Collection<Entrenador> getEntrenadores() {

		return null;
	}

	@Override
	public Collection<Jugador> getJugadores() {

		return null;
	}

	@Override
	public boolean tieneEntrenador() {

		return false;
	}

	@Override
	public boolean tieneJugadores() {

		return false;
	}

	@Override
	public void agregarEntrenador(Entrenador entrenador) {

		
	}

	@Override
	public void eliminarEntrenador(Entrenador entrenador) {

		
	}

	@Override
	public void agregarJugador(Jugador jugador) {

		
	}

	@Override
	public void eliminarJugador(Jugador jugador) {

		
	}

	@Override
	public void agregarJugadores(Collection<Jugador> jugadores) {

		
	}

	@Override
	public Competicion getCompeticion() {

		return (Competicion) competicion;
	}

	@Override
	public Calendario getCalendario() {

		return competicion.getCompeticion().getCalendario();
	}

}
